################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
program_libs = src/libdafka.la ${project_libs}

# Programs need to link the c++ runtime if everything was compiled statically.
if !ENABLE_SHARED
program_libs += -lstdc++ -lm
endif

lib_LTLIBRARIES += src/libdafka.la
pkgconfig_DATA = src/libdafka.pc

src_libdafka_la_SOURCES = \
    src/dafka_consumer_msg.c \
    src/dafka_producer_msg.c \
    src/dafka_producer.c \
    src/dafka_consumer.c \
    src/dafka_util.c \
    src/dafka_proto.c \
    src/dafka_beacon.c \
    src/dafka_tower.c \
    src/dafka_store.c \
    src/platform.h

if ENABLE_DRAFTS
src_libdafka_la_SOURCES += \
    src/dafka_private_selftest.c
endif

src_libdafka_la_CPPFLAGS = ${AM_CPPFLAGS}

src_libdafka_la_LDFLAGS = \
    -version-info @LTVER@ \
    $(LIBTOOL_EXTRA_LDFLAGS)

if ON_MINGW
src_libdafka_la_LDFLAGS += \
    -no-undefined \
    -avoid-version
endif

if ON_CYGWIN
src_libdafka_la_LDFLAGS += \
    -no-undefined \
    -avoid-version
endif

src_libdafka_la_LIBADD = ${project_libs}

if ENABLE_DAFKA_CONSOLE_PRODUCER
bin_PROGRAMS += src/dafka_console_producer
src_dafka_console_producer_CPPFLAGS = ${AM_CPPFLAGS}
src_dafka_console_producer_LDADD = ${program_libs}
src_dafka_console_producer_SOURCES = src/dafka_console_producer.c
endif #ENABLE_DAFKA_CONSOLE_PRODUCER

if ENABLE_DAFKA_CONSOLE_CONSUMER
bin_PROGRAMS += src/dafka_console_consumer
src_dafka_console_consumer_CPPFLAGS = ${AM_CPPFLAGS}
src_dafka_console_consumer_LDADD = ${program_libs}
src_dafka_console_consumer_SOURCES = src/dafka_console_consumer.c
endif #ENABLE_DAFKA_CONSOLE_CONSUMER

if ENABLE_DAFKA_STORED
bin_PROGRAMS += src/dafka_stored
src_dafka_stored_CPPFLAGS = ${AM_CPPFLAGS}
src_dafka_stored_LDADD = ${program_libs}
src_dafka_stored_SOURCES = src/dafka_stored.c
endif #ENABLE_DAFKA_STORED

if ENABLE_DAFKA_TOWERD
bin_PROGRAMS += src/dafka_towerd
src_dafka_towerd_CPPFLAGS = ${AM_CPPFLAGS}
src_dafka_towerd_LDADD = ${program_libs}
src_dafka_towerd_SOURCES = src/dafka_towerd.c
endif #ENABLE_DAFKA_TOWERD

if ENABLE_DAFKA_PERF_STORE
noinst_PROGRAMS += src/dafka_perf_store
src_dafka_perf_store_CPPFLAGS = ${AM_CPPFLAGS}
src_dafka_perf_store_LDADD = ${program_libs}
src_dafka_perf_store_SOURCES = src/dafka_perf_store.c
endif #ENABLE_DAFKA_PERF_STORE

if ENABLE_DAFKA_SELFTEST
check_PROGRAMS += src/dafka_selftest
noinst_PROGRAMS += src/dafka_selftest
src_dafka_selftest_CPPFLAGS = ${AM_CPPFLAGS}
src_dafka_selftest_LDADD = ${program_libs}
src_dafka_selftest_SOURCES = src/dafka_selftest.c
endif #ENABLE_DAFKA_SELFTEST

# Install api files into /usr/local/share/zproject
apidir = @datadir@/zproject/dafka
dist_api_DATA = \
    api/dafka_consumer_msg.api \
    api/dafka_producer_msg.api \
    api/dafka_producer.api \
    api/dafka_consumer.api \
    api/dafka_proto.api

# define custom target for all products of /src
src: \
		src/dafka_console_producer \
		src/dafka_console_consumer \
		src/dafka_stored \
		src/dafka_towerd \
		src/dafka_perf_store \
		src/dafka_selftest \
		src/libdafka.la

# Produce generated code from models in the src directory
code:
	cd $(srcdir)/src; gsl -topdir:.. -zproject:1 -q dafka_proto.xml
	cd $(srcdir); gsl -target:- project.xml

# Directories with test fixtures optionally provided by the project,
# and with volatile RW data possibly created by a selftest program.
# It is up to the project authors to populate the RO directory with
# filenames called from the selftest methods, if any. They will be
# EXTRA_DISTed by the recipes generated with with zproject, however,
# and copied into builddir (if different from srcdir) to simplify
# the "distcheck" and similar tests (so selftest can use same paths).
# Note that the RO directory must exist to fulfill EXTRA_DIST, so we
# add a stub file that can be committed to SCM by project developers.
# The RW directory will be automatically wiped by "make distclean".
SELFTEST_DIR_RO = src/selftest-ro
SELFTEST_DIR_RW = src/selftest-rw

# This is recreated on every invocation (as a selftest dependency),
# so tests run in a clean environment
$(top_builddir)/$(SELFTEST_DIR_RW):
	rm -rf "$@"
	mkdir -p "$@"

# Note: for some reason "$<" misfired in rule below on Travis, so be explicit
if USING_VPATH
$(abs_top_builddir)/$(SELFTEST_DIR_RO): $(abs_top_srcdir)/$(SELFTEST_DIR_RO)
	@echo "   COPYDIR  $(SELFTEST_DIR_RO)"; \
	rm -rf "$@"; \
	cp -r "$(abs_top_srcdir)/$(SELFTEST_DIR_RO)" "$@"

$(top_builddir)/$(SELFTEST_DIR_RO): $(abs_top_builddir)/$(SELFTEST_DIR_RO)
endif

$(SELFTEST_DIR_RO): $(top_builddir)/$(SELFTEST_DIR_RO)

CLEANFILES += $(top_builddir)/$(SELFTEST_DIR_RW)/*

# Note that this syntax dists the whole directory - including subdirs (if any)
EXTRA_DIST += $(SELFTEST_DIR_RO)

clean-local: clean-local-selftest-ro clean-local-selftest-rw
.PHONY: clean-local-selftest-ro
clean-local-selftest-ro:
	@if test "$(top_builddir)" != "$(top_srcdir)" ; then \
		if test -d "$(top_builddir)/$(SELFTEST_DIR_RO)" ; then \
			chmod -R u+w "$(top_builddir)/$(SELFTEST_DIR_RO)" ; \
			rm -rf "$(top_builddir)/$(SELFTEST_DIR_RO)" ; \
		fi; \
	fi

# Unlike CLEANFILES setting above, this one whould also wipe created subdirs
.PHONY: clean-local-selftest-rw
clean-local-selftest-rw:
	@if test "$(top_builddir)" != "$(top_srcdir)" ; then \
		if test -d "$(top_builddir)/$(SELFTEST_DIR_RW)" ; then \
			chmod -R u+w "$(top_builddir)/$(SELFTEST_DIR_RW)" ; \
			rm -rf "$(top_builddir)/$(SELFTEST_DIR_RW)" ; \
		fi; \
	fi

check-empty-selftest-rw:
	if test -e $(top_builddir)/$(SELFTEST_DIR_RW) ; then \
		if test `find "$(top_builddir)/$(SELFTEST_DIR_RW)" | wc -l` -lt 1 ; then \
			echo "FATAL: selftest did not tidy up the data it wrote" >&2 ; \
			find "$(top_builddir)/$(SELFTEST_DIR_RW)" ; \
			exit 2; \
		else true ; fi; \
	else true ; fi

check-local: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/dafka_selftest
	$(MAKE) check-empty-selftest-rw

check-verbose: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/dafka_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary under valgrind to check for memory leaks
memcheck: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck \
		--leak-check=full --show-reachable=yes --error-exitcode=1 \
		--suppressions=$(srcdir)/src/.valgrind.supp \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/dafka_selftest
	$(MAKE) check-empty-selftest-rw

memcheck-verbose: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=memcheck \
		--leak-check=full --show-reachable=yes --error-exitcode=1 \
		--suppressions=$(srcdir)/src/.valgrind.supp \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/dafka_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary under valgrind to check for performance leaks
callcheck: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=callgrind \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/dafka_selftest
	$(MAKE) check-empty-selftest-rw

callcheck-verbose: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute valgrind --tool=callgrind \
		$(VALGRIND_OPTIONS) \
		$(builddir)/src/dafka_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary under gdb for debugging
debug: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute gdb -q \
		$(builddir)/src/dafka_selftest
	$(MAKE) check-empty-selftest-rw

debug-verbose: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute gdb -q \
		$(builddir)/src/dafka_selftest -v
	$(MAKE) check-empty-selftest-rw

# Run the selftest binary with verbose switch for tracing
animate: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$(LIBTOOL) --mode=execute $(builddir)/src/dafka_selftest -v
	$(MAKE) check-empty-selftest-rw

animate-verbose: animate

if WITH_GCOV
coverage: src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	@echo "you had called configure --with-gcov"
	lcov --base-directory . --directory . --zerocounters -q
	$(MAKE) check
	lcov --base-directory . --directory . --capture -o coverage.info
	lcov --remove coverage.info "/usr*" -o coverage.info
	lcov --remove coverage.info "dafka_selftest.c" -o coverage.info
	$(RM) -rf coverage/*
	genhtml -o coverage/ -t "dafka test coverage" --num-spaces 4 coverage.info
else
coverage: src/dafka_selftest
	@echo "call make clean && configure --with-gcov to enable code coverage"
	@exit 1
endif

bindings: python-bindings

python-bindings:
if ENABLE_BINDINGS_PYTHON
	-( cd bindings/python && python setup.py install )
else
	@echo "Python Bindings not enabled or missing setup.py... skipping"

endif

# A series of tests that the codebase and recipes are pretty, easy
# to maintain and with predictable behavior. These generally are not
# expected to directly expose functional issues in the code, but
# still - there can be many reasons for failing such tests, and
# many lurking issues uncoverable by making code stylish again.
CHECK_STYLE_DEPS = check-gitignore
if WITH_CLANG_FORMAT
CHECK_STYLE_DEPS += clang-format-check
endif
check-style: $(CHECK_STYLE_DEPS)

if WITH_CLANG_FORMAT
ALL_SOURCE_FILES = $(wildcard \
	$(top_srcdir)/src/*.c \
	$(top_srcdir)/src/*.cc \
	$(top_srcdir)/src/*.cpp \
	$(top_srcdir)/src/*.h \
	$(top_srcdir)/src/*.hpp \
	$(top_srcdir)/tests/*.c \
	$(top_srcdir)/tests/*.cc \
	$(top_srcdir)/tests/*.cpp \
	$(top_srcdir)/tests/*.h \
	$(top_srcdir)/tests/*.hpp \
	$(top_srcdir)/perf/*.c \
	$(top_srcdir)/perf/*.cc \
	$(top_srcdir)/perf/*.cpp \
	$(top_srcdir)/perf/*.h \
	$(top_srcdir)/perf/*.hpp \
	$(top_srcdir)/tools/*.c \
	$(top_srcdir)/tools/*.cc \
	$(top_srcdir)/tools/*.cpp \
	$(top_srcdir)/tools/*.h \
	$(top_srcdir)/tools/*.hpp \
	$(top_srcdir)/include/*.h \
	$(top_srcdir)/include/*.hpp \
 )

# Check if any sources need to be fixed, report the filenames and an error code
clang-format-check: $(ALL_SOURCE_FILES)
	@if test -z "$(CLANG_FORMAT)" ; then \
		echo "FAILURE: CLANG_FORMAT program was not specified or found" >&2 ; \
		exit 1 ; \
	fi
	@FAILED=0 ; IFS=";" ; IDS="`printf '\n\b'`" ; export IFS IDS; \
	 for FILE in $(ALL_SOURCE_FILES) ; do \
		test -s $$FILE || continue ; \
		$(CLANG_FORMAT) -style=file -output-replacements-xml "$$FILE" | grep "<replacement " >/dev/null && \
		{ echo "$$FILE is not correctly formatted" >&2 ; FAILED=1; } ; \
	 done; \
	 if test "$$FAILED" != 0 ; then \
		exit 1 ; \
	 fi

# Change source formatting
clang-format: $(ALL_SOURCE_FILES)
	@if test -z "$(CLANG_FORMAT)" ; then \
		echo "FAILURE: CLANG_FORMAT program was not specified or found" >&2 ; \
		exit 1 ; \
	fi
	$(CLANG_FORMAT) -style=file -i $(ALL_SOURCE_FILES)

# Change source formatting AND report the diff
clang-format-diff: clang-format
	git diff $(ALL_SOURCE_FILES)

# A destructive (will change code in workspace) but informative check; this is
# primarily intended for CI temporary workspaces where mutilation is acceptable.
# The envvar/makearg CI_REQUIRE_GOOD_CLANG_FORMAT manages if this test is fatal.
clang-format-check-CI:
	@echo "CI-checking code style ..." >&2
	@if $(MAKE) clang-format-check ; then \
	   echo "SUCCESS : Style checks have passed" >&2 ; \
	else \
	   echo "" >&2 ; \
	   if test -n "$(CLANG_FORMAT)" ; then \
	     echo "Style mismatches were found by clang-format; detailing below:" >&2 ; \
	     $(MAKE) VERBOSE=1 clang-format-diff ; \
	   fi ; \
	   if test x"$(CI_REQUIRE_GOOD_CLANG_FORMAT)" = xtrue ; then \
	     echo "FAILED : Style checks have failed and CI_REQUIRE_GOOD_CLANG_FORMAT==true" >&2 ; \
	     exit 1 ; \
	   fi ; \
	   echo "WARNING : Style checks have failed, but the result is not-fatal because CI_REQUIRE_GOOD_CLANG_FORMAT!=true" >&2 ; \
	fi

else
clang-format clang-format-check clang-format-diff:
	@echo "Install the clang-format program, reconfigure and re-run this request"
	@exit 1

clang-format-check-CI:
	@echo "Install the clang-format program, reconfigure and re-run this request"
	@if test x"$(CI_REQUIRE_GOOD_CLANG_FORMAT)" = xtrue ; then \
	     echo "FAILED : Style checks have failed and CI_REQUIRE_GOOD_CLANG_FORMAT==true" >&2 ; \
	     exit 1 ; \
	 fi ; \
	 echo "WARNING : Style checks have failed, but the result is not-fatal because CI_REQUIRE_GOOD_CLANG_FORMAT!=true" >&2
endif

# Note: analysis is not a target executed by default, so there is no
# safety-net for the "cppcheck.xml" recipe; there is one for the wrapper.
# A developer is expected to install tools in build environment, if needed.
# The results can be used to produce some statistics how project quality
# changes over many builds (with a relevant Jenkins plugin, for example).
if WITH_CPPCHECK
cppcheck: cppcheck.xml
else
cppcheck:
	@echo "NOT ENABLED: cppcheck static analysis. Please install the toolkit and reconfigure, and/or make cppcheck.xml directly."
endif

cppcheck.xml:
	@echo "Performing cppcheck static analysis..."
	cppcheck --enable=all --inconclusive --xml --xml-version=2 . 2>"$@"
	@echo "The cppcheck static analysis is done"

# Note: this recipe tests that the Git-based workspace reports no changed
# or untracked files - meaning there are no unexpected behaviors in the
# recipes (when checking after a build), and nothing was missed while
# updating the project structure (when checking in the midst of development
# or after regenerating the zproject skeletons), for example. For best
# results, developers are advised to also run this after executing their
# tests, to make sure they are stateless and clean as well. Caller may
# export envvar (or pass make argument) CI_REQUIRE_GOOD_GITIGNORE=false
# to explicitly disable fatality of this check, while still logging it.

# This recipe is "stateless" by itself, not causing any workspace changes:
check-gitignore:
	@(if which git >/dev/null 2>&1 ; then \
	     RES=0; \
	     echo "Checking for untracked and not-ignored files in the workspace (should have no output below)..."; \
	     git status -s | egrep '^\?\? ' && RES=1 ; \
	     echo "Checking for modified tracked files in the workspace (should have no output below)..."; \
	     git status -s | egrep '^ *M ' && RES=1 && git diff | cat ; \
	     if [ "$$RES" = 0 ]; then \
	         echo "PASS: $@"; exit 0 ; \
	     else \
	         if [ x"$(CI_REQUIRE_GOOD_GITIGNORE)" = xfalse ] ; then \
	             echo "WARNING: $@ found newly changed or untracked and not-ignored files (not a test failure due to CI_REQUIRE_GOOD_GITIGNORE==false)"; exit 0 ; \
	         fi; \
	         echo "FAIL: $@ (see workspace checks above)"; exit 1; \
	     fi; \
	   else \
	     echo "SKIP: $@ (no git)"; exit 0 ; \
	   fi )

# This calls the recipe above after building the project products and
# the selftest binary, and preparing the workspace for self-testing:
check-gitignore-all: all src/dafka_selftest $(top_builddir)/$(SELFTEST_DIR_RW) $(top_builddir)/$(SELFTEST_DIR_RO)
	$@$(MAKE) check-gitignore


################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
